plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    accessWidenerPath = file("src/main/resources/tokyo-client.accesswidener")
}

repositories {
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
        content {
            includeGroup "meteordevelopment"
            includeGroup "com.github.LlamaLad7.MixinExtras"
            includeGroup "io.github.racoondog"
            includeGroup "de.florianmichael"
        }
    }
    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
        content {
            includeGroup "meteordevelopment"
            includeGroup "baritone"
        }
    }
    maven {
        name = "lenni0451-maven"
        url = "https://maven.lenni0451.net/releases"
        content {
            includeGroup "net.lenni0451"
        }
    }
    /*
    maven {
        name = "xpple-maven"
        url = "https://maven.xpple.dev/maven2"
        content {
            includeGroup "dev.xpple"
        }
    }
     */
}

configurations {
    modImplementation.extendsFrom(modImplementationInclude)
    include.extendsFrom(modImplementationInclude)

    implementation.extendsFrom(implementationInclude)
    include.extendsFrom(implementationInclude)
}

dependencies {
    // Default
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation("meteordevelopment:meteor-client:${project.meteor_version}")

    // Libraries
    modImplementationInclude "io.github.racoondog:LaunchArgsAPI:${project.launchargsapi_version}"
    //modImplementationInclude "dev.xpple:clientarguments:${project.clientarguments_version}"
    implementationInclude "net.lenni0451:Reflect:${project.reflect_version}"
    implementationInclude("net.dv8tion:JDA:${project.jda_version}") {
        exclude module: 'opus-java'
    }
}

processResources {
    def map = [
        "version": project.version,
        "mc_version": project.minecraft_version
    ]

    inputs.properties(map)
    filesMatching("fabric.mod.json") {
        expand(map)
    }
}

java {
    withSourcesJar()

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}" }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding("UTF-8")
}
